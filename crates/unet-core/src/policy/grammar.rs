//! Grammar definitions and parser generation for the Policy DSL
//!
//! This module uses Pest to generate a parser from the policy.pest grammar file.

use pest_derive::Parser;

/// The main parser struct generated by Pest
#[derive(Parser)]
#[grammar = "policy/policy.pest"]
pub struct PolicyGrammar;

#[cfg(test)]
mod tests {
    use super::*;
    use pest::Parser;

    #[test]
    fn test_simple_rule_parsing() {
        let input = r#"WHEN node.vendor == "cisco" THEN ASSERT node.version IS "15.1""#;
        let result = PolicyGrammar::parse(Rule::rule, input);
        assert!(result.is_ok(), "Failed to parse simple rule: {:?}", result);
    }

    #[test]
    fn test_complex_condition_parsing() {
        let input = r#"WHEN node.vendor == "juniper" AND node.model CONTAINS "qfx" THEN SET custom_data.priority TO "high""#;
        let result = PolicyGrammar::parse(Rule::rule, input);
        assert!(
            result.is_ok(),
            "Failed to parse complex condition: {:?}",
            result
        );
    }

    #[test]
    fn test_regex_literal_parsing() {
        let input = r#"WHEN node.hostname MATCHES /^dist-\d+$/ THEN APPLY "dist-template.jinja""#;
        let result = PolicyGrammar::parse(Rule::rule, input);
        assert!(
            result.is_ok(),
            "Failed to parse regex literal: {:?}",
            result
        );
    }

    #[test]
    fn test_boolean_operators_parsing() {
        let input = r#"WHEN (node.vendor == "cisco" OR node.vendor == "juniper") AND NOT node.lifecycle == "decommissioned" THEN ASSERT node.snmp_enabled IS true"#;
        let result = PolicyGrammar::parse(Rule::rule, input);
        assert!(
            result.is_ok(),
            "Failed to parse boolean operators: {:?}",
            result
        );
    }

    #[test]
    fn test_null_check_parsing() {
        let input = r"WHEN custom_data.location IS NOT NULL THEN SET node.location_id TO custom_data.location";
        let result = PolicyGrammar::parse(Rule::rule, input);
        assert!(result.is_ok(), "Failed to parse null check: {:?}", result);
    }

    #[test]
    fn test_policy_file_parsing() {
        let input = r#"
            // Network vendor compliance policy
            WHEN node.vendor == "cisco" THEN ASSERT node.os_version IS "15.1"
            
            /* Multi-line comment
               describing complex policy logic */
            WHEN node.role == "router" AND node.location.region == "west" 
            THEN SET custom_data.backup_priority TO "high"
        "#;
        let result = PolicyGrammar::parse(Rule::policy_file, input);
        assert!(result.is_ok(), "Failed to parse policy file: {:?}", result);
    }
}
