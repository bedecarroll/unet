<context>

# Overview

uNet is a network configuration management and automation platform designed for network engineers and operations teams. It provides a unified interface to author, validate, and deploy device configurations at scale, enforce compliance policies, and automate routine tasks. By combining a DSL-based policy engine, a template engine, and powerful CLI and server components, uNet accelerates configuration delivery, reduces human error, and ensures consistent, compliant network states.

# Core Features

- Configuration Templating
  - What it does: Generates vendor-specific device configurations from reusable templates and data models.
  - Why it's important: Ensures consistency and reduces manual errors by abstracting device-specific syntax.
  - How it works: Users define layouts in Minijinja templates, inject variables from structured YAML/JSON data, and render final configs via CLI or server API.

- Policy Engine
  - What it does: Validates and enforces compliance policies against network configs and live device state.
  - Why it's important: Proactively catches misconfigurations and security violations before deployment.
  - How it works: DSL-based rules parsed with Pest, applied against configuration ASTs or device data, with reports on policy violations.

- Config Slicer
  - What it does: Extracts and diffs device configurations or network segments for targeted analysis.
  - Why it's important: Enables partial updates, limit blast radius, and focus on relevant config sections.
  - How it works: Leverages config-slicer crate to parse and isolate subtrees of configuration, and compute diffs via Similar.

- CLI Tool
  - What it does: Provides command-line interface for all core operations (template render, policy check, slice, deploy).
  - Why it's important: Meets traditional workflows and automation scripts for network operations.
  - How it works: Built with Clap, exposes subcommands mapped to core library functions in unet-core.

- Server Backend & API
  - What it does: Hosts persistent services for multi-user workflows, job scheduling, and integration.
  - Why it's important: Facilitates team collaboration, audit trails, and continuous validation.
  - How it works: Axum-based HTTP API with Tower middleware, connected to SeaORM-backed database, Cron scheduler for periodic tasks.

- CI/CD & Deployment
  - What it does: Automates builds, tests, and deployments of uNet components.
  - Why it's important: Ensures reliability, quick feedback loops, and reproducible environments.
  - How it works: Uses GitHub Actions or equivalent (defined in docs/07_ci_cd.md) to build Rust crates, run tests, and publish Docker images.

# User Experience

- User Personas
  - Network Engineer: Author templates and policies, run validations before change windows.
  - DevOps Engineer: Integrate uNet into CI/CD pipelines, manage deployments and monitoring.
  - Compliance Auditor: Review policy reports and historical config versions for audits.

- Key User Flows
  1. Define a template and data file → Render config via CLI → Review and deploy.
  2. Write a policy rule → Run policy check → Analyze violation report.
  3. Schedule nightly compliance check via server → Receive summary email/alert.

- UI/UX Considerations
  - CLI feedback must be clear, colorized, and structured (JSON output option).
  - REST API returns standardized HTTP status codes and JSON responses.
  - Documentation site (docs/) serves as the primary UI for onboarding and reference.

</context>
<PRD>

# Technical Architecture

- System Components
  - unet-core: Shared library with data models, policy engine, template processing.
  - unet-cli: Command-line interface.
  - unet-server: HTTP service with job scheduling and multi-tenant support.
  - config-slicer: Tool for partial config extraction and diffing.
  - migrations: Database schema migrations via SeaORM.

- Data Models
  - Device, Template, Policy, Job, Schedule entities persisted in a SQL database.
  - AST representations for config parsing and policy evaluation.

- APIs and Integrations
  - REST API endpoints for render, validate, slice, and status under /api/v1.
  - SNMP2 integration for live device data collection.
  - Webhooks or email notifications for job results.

- Infrastructure Requirements
  - Rust 1.85+ runtime, target Linux containers.
  - PostgreSQL or SQLite for persistence (configurable).
  - Docker/Kubernetes deployment for server component.
  - Cron scheduler integrated via tokio-cron-scheduler.

# Development Roadmap

## Phase 1: MVP

- Core library (unet-core) with template rendering, policy engine, and config slicing.
- CLI tool with basic subcommands: render, check, slice.
- Unit and integration tests for core features.

## Phase 2: Server Backend

- HTTP API scaffolding with Axum, job scheduling, persistence.
- Authentication/authorization (API tokens) and multi-user isolation.
- CLI -> API mode switch for remote operations.

## Phase 3: Enhanced UI & CI/CD

- Develop lightweight web UI for job management and policy editing.
- CI/CD pipelines, Docker images, and Helm charts (docs/07_ci_cd.md & 08_deployment.md).
- Monitoring, metrics, and logging enhancements.

## Phase 4: Enterprise Features

- Role-based access control and auditing.
- High-availability deployment patterns.
- Integration with external configuration management systems.

# Logical Dependency Chain

1. Define core data models and AST for configs and policies.
2. Implement template engine integration (Minijinja) in unet-core.
3. Add policy DSL parser and evaluator.
4. Build CLI bindings for core APIs.
5. Develop config-slicer and diff features.
6. Scaffold server backend and database migrations.
7. Integrate scheduling and live device data via SNMP2.
8. Expose REST endpoints, implement auth, and polish CLI for remote mode.
9. Prototype web UI and feedback loops.
10. Establish CI/CD pipelines, containerization, and deployment manifests.

# Risks and Mitigations

- DSL Complexity: Designing a policy language that is both expressive and performant.
  Mitigation: Start with minimal rule abstractions, gather user feedback, iterate.
- SNMP Reliability: Live data polling may fail or be slow.
  Mitigation: Implement retries, caching layers, and support manual data imports.
- Database Schema Evolution: Changing models could break migrations.
  Mitigation: Use SeaORM migrations with version control and backups.
- Resource Constraints: Limited development bandwidth may delay features.
  Mitigation: Prioritize core MVP, maintain clear scope, and defer non-critical items to future phases.

# Appendix

- Detailed design in docs/src (architecture, data_models, policy_engine, template_engine).
- Quality Report: docs/src/quality_report_pre_milestone_3.md.
- Implementation plan: docs/src/unet_implementation_plan.md.
- CI/CD definitions: docs/src/07_ci_cd.md and 08_deployment.md.

</PRD>
