name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Coverage configuration
  COVERAGE_THRESHOLD: 84
  COVERAGE_IGNORE_PATTERN: '(tests?\.rs|_tests?\.rs|comprehensive_tests\.rs)$'

permissions:
  contents: read

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: jdx/mise-action@v2
        with:
          experimental: true
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Install project dependencies
        run: mise install
      
      - name: Install formatting and linting tools
        run: |
          rustup component add rustfmt clippy
          
      - name: Run linting and formatting checks
        run: mise run lint
        
      - name: Check file sizes
        run: mise run check-large-files

  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: jdx/mise-action@v2
        with:
          experimental: true
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Install project dependencies
        run: mise install
      
      - name: Install coverage tools
        run: rustup component add llvm-tools-preview
          
      - name: Run test suite
        run: mise run test
      
      - name: Generate coverage report
        run: |
          cargo llvm-cov \
            --workspace \
            --all-features \
            --all-targets \
            --show-missing-lines \
            --ignore-filename-regex "$COVERAGE_IGNORE_PATTERN" \
            --fail-under-lines $COVERAGE_THRESHOLD \
            --lcov \
            --output-path lcov.info
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./lcov.info
          fail_ci_if_error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: jdx/mise-action@v2
        with:
          experimental: true
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Install project dependencies
        run: mise install
      
      - name: Audit dependencies for vulnerabilities
        run: cargo audit

  docs:
    name: API Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: jdx/mise-action@v2
        with:
          experimental: true
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Install project dependencies
        run: mise install
      
      - name: Build API documentation
        run: cargo doc --workspace --no-deps --document-private-items